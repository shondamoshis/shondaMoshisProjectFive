{"version":3,"sources":["firebase.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Form","scrollDiv","createRef","handleChange","event","setState","target","name","value","handleSubmit","e","preventDefault","dbRef","database","ref","push","state","inputOne","inputTwo","inputThree","scrollSmoothHandler","current","scrollIntoView","behavior","this","onSubmit","className","required","type","onChange","onClick","Component","App","deleteBtn","wordId","child","remove","userInput","on","response","newState","data","val","key","item","id","map","word","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TAaAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,E,QC6CeS,E,kDAvDX,aAAc,IAAD,8BACT,gBAFJC,UAAYC,sBACC,EAQbC,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SAV7B,EAebC,aAAe,SAACC,GACZA,EAAEC,iBAEF,IAAMC,EAAQrB,EAASsB,WAAWC,MAElCF,EAAMG,KAAK,EAAKC,MAAMC,UACtBL,EAAMG,KAAK,EAAKC,MAAME,UACtBN,EAAMG,KAAK,EAAKC,MAAMG,YAEtB,EAAKd,SAAS,CACVY,SAAS,GACTC,SAAS,GACTC,WAAW,MA3BN,EAgCbC,oBAAsB,WAClB,EAAKnB,UAAUoB,QAAQC,eAAe,CAAEC,SAAU,YA/BlD,EAAKP,MAAQ,CACTC,SAAU,GACVC,SAAU,GACVC,WAAY,IALP,E,qDAuCT,OACI,0BAAML,IAAKU,KAAKvB,UAAWwB,SAAUD,KAAKf,aAAciB,UAAU,aAE9D,2BAAOC,UAAQ,EAACC,KAAK,OAAOpB,MAAOgB,KAAKR,MAAMC,SAAUV,KAAK,WAAWsB,SAAUL,KAAKrB,eAEvF,2BAAOwB,UAAQ,EAACC,KAAK,OAAOpB,MAAOgB,KAAKR,MAAME,SAAUX,KAAK,WAAWsB,SAAUL,KAAKrB,eAEvF,2BAAOwB,UAAQ,EAACC,KAAK,OAAOpB,MAAOgB,KAAKR,MAAMG,WAAYZ,KAAK,aAAasB,SAAUL,KAAKrB,eAE3F,4BAAQyB,KAAK,SAASH,SAAUD,KAAKf,aAAcqB,QAASN,KAAKJ,qBAAjE,Y,GAlDGW,aCyGJC,E,kDAtGb,aAAc,IAAD,8BACX,gBA8BJC,UAAY,SAACC,GACG3C,EAASsB,WAAWC,MAC5BqB,MAAMD,GAAQE,UA/BlB,EAAKpB,MAAQ,CACbqB,UAAU,GACVpB,SAAS,GACTC,SAAS,GACTC,WAAW,IANA,E,gEAWK,IAAD,OACH5B,EAASsB,WAAWC,MAE5BwB,GAAG,SAAQ,SAACC,GAElB,IAAMC,EAAW,GACXC,EAAOF,EAASG,MAEtB,IAAI,IAAIC,KAAOF,EACbD,EAASzB,KAAK,CAAC6B,KAAKH,EAAKE,GAAME,GAAGF,IAEpC,EAAKtC,SAAS,CACZgC,UAAUG,S,+BAeH,IAAD,OAER,OAEE,yBAAKd,UAAU,OAEb,gCAEE,0CAIF,6BAASA,UAAU,8BAEjB,yBAAKA,UAAU,eAEb,kDAEE,yHAIJ,yBAAKA,UAAU,eAEb,2DAEE,yLAKN,6BAASA,UAAU,wBAEjB,wEAEA,+EAEF,kBAAC,EAAD,MAEE,yBAAKA,UAAU,gBAEXF,KAAKR,MAAMqB,UAAUS,KAAI,SAACC,GAEtB,OAEE,yBAAKrB,UAAU,kBAEX,uBAAGiB,IAAKI,EAAKF,IAAKE,EAAKH,MAAS,4BAAQd,QAAS,kBAAI,EAAKG,UAAUc,EAAKF,KAAKnB,UAAU,aAAxD,WAOhD,gCAEE,0CAAe,uBAAGsB,KAAK,+BAAR,wB,GA/FLjB,aCOEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.17c20333.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAkx6OXoX35t6QZKKJT-lmJIzfSQ8ekPuU\",\r\n    authDomain: \"practice-gratitude.firebaseapp.com\",\r\n    databaseURL: \"https://practice-gratitude.firebaseio.com\",\r\n    projectId: \"practice-gratitude\",\r\n    storageBucket: \"practice-gratitude.appspot.com\",\r\n    messagingSenderId: \"106297587589\",\r\n    appId: \"1:106297587589:web:a0db08247f6a89e64fb6ec\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, {Component, createRef} from 'react';\r\nimport firebase from './firebase';\r\n\r\nclass Form extends Component{\r\n    scrollDiv = createRef();\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inputOne: '',\r\n            inputTwo: '',\r\n            inputThree: ''\r\n        }\r\n    }\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    \r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const dbRef = firebase.database().ref()\r\n\r\n        dbRef.push(this.state.inputOne)\r\n        dbRef.push(this.state.inputTwo)\r\n        dbRef.push(this.state.inputThree)\r\n\r\n        this.setState({\r\n            inputOne:'',\r\n            inputTwo:'',\r\n            inputThree:''\r\n        })\r\n        \r\n        }\r\n    \r\n    scrollSmoothHandler = () => {\r\n        this.scrollDiv.current.scrollIntoView({ behavior: \"smooth\" });\r\n    };\r\n        \r\n   \r\n\r\n    render() {\r\n        return (\r\n            <form ref={this.scrollDiv} onSubmit={this.handleSubmit} className=\"inputForm\">\r\n\r\n                <input required type=\"text\" value={this.state.inputOne} name=\"inputOne\" onChange={this.handleChange} />\r\n\r\n                <input required type=\"text\" value={this.state.inputTwo} name=\"inputTwo\" onChange={this.handleChange} />\r\n\r\n                <input required type=\"text\" value={this.state.inputThree} name=\"inputThree\" onChange={this.handleChange} />\r\n\r\n                <button type=\"submit\" onSubmit={this.handleSubmit} onClick={this.scrollSmoothHandler}>Add</button>\r\n                \r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React, {Component} from 'react';\nimport './App.css';\nimport firebase from './firebase';\nimport Form from './Form';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n    userInput:[],\n    inputOne:'',\n    inputTwo:'',\n    inputThree:''\n  }\n}\n\n\ncomponentDidMount(){\n  const dbRef = firebase.database().ref();\n\n  dbRef.on('value',(response)=>{\n\n  const newState = [];\n  const data = response.val();\n  \n  for(let key in data){\n    newState.push({item:data[key], id:key})\n  }\n  this.setState({\n    userInput:newState\n  })\n  })\n\n}\n\n\n\ndeleteBtn = (wordId) =>{\n  const dbRef = firebase.database().ref()\n  dbRef.child(wordId).remove();\n}\n \n  \n\n  render(){\n\n  return (\n\n    <div className=\"App\">\n\n      <header>\n\n        <h1>Gratitude</h1>\n\n      </header>\n\n      <section className=\"explanationSection wrapper\">\n\n        <div className=\"explanation\">\n\n          <h2>What is Gratitude?</h2>\n\n            <p>The quality of being thankful; readiness to show appreciation for and to return kindness.</p>\n\n        </div>\n\n        <div className=\"explanation\">\n\n          <h2>The Importance of Gratitude</h2>\n\n            <p>Practicing gratitude allows you to focus on the present, appreciate what you have rather than what you do not have, and increases feelings of happiness.</p>\n        </div>\n\n      </section>\n\n      <section className=\"inputSection wrapper\">\n\n        <h3>Let's create an adbundance of gratitude!</h3>\n\n        <h3>Please share three things you are grateful for:</h3>\n\n      <Form />\n      \n        <div className=\"responseArea\">{\n\n            this.state.userInput.map((word)=>{\n\n                return(\n\n                  <div className=\"inputContainer\">\n          \n                      <p key={word.id}>{word.item}</p><button onClick={()=>this.deleteBtn(word.id)} className=\"deleteBtn\">X</button>\n          \n                  </div>\n                      )\n            })\n        }</div>\n      </section>\n      <footer>\n\n        <p>Designed by <a href=\"http://www.shondamoshis.com\">Shonda Moshis</a></p>\n\n      </footer>\n    \n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}