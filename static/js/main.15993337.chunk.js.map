{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleChange","event","setState","target","name","value","handleClick","e","preventDefault","dbRef","database","ref","push","state","inputOne","inputTwo","inputThree","deleteBtn","wordId","child","remove","userInput","on","response","newState","data","val","key","item","id","className","action","required","type","this","onChange","onClick","map","word","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qUAaAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,ECyFeS,E,kDAnGb,aAAc,IAAD,8BACX,gBA2BJC,aAAe,SAACC,GAChB,EAAKC,SAAL,eACGD,EAAME,OAAOC,KAAMH,EAAME,OAAOE,SA9BpB,EAiCfC,YAAc,SAACC,GACbA,EAAEC,iBAEF,IAAMC,EAAQnB,EAASoB,WAAWC,MAElCF,EAAMG,KAAK,EAAKC,MAAMC,UACtBL,EAAMG,KAAK,EAAKC,MAAME,UACtBN,EAAMG,KAAK,EAAKC,MAAMG,YAEtB,EAAKd,SAAS,CACZY,SAAS,GACTC,SAAS,GACTC,WAAW,MA7CA,EAgDfC,UAAY,SAACC,GACG5B,EAASoB,WAAWC,MAC5BQ,MAAMD,GAAQE,UAhDlB,EAAKP,MAAQ,CACbQ,UAAU,GACVP,SAAS,GACTC,SAAS,GACTC,WAAW,IANA,E,gEAUK,IAAD,OACH1B,EAASoB,WAAWC,MAE5BW,GAAG,SAAQ,SAACC,GAElB,IAAMC,EAAW,GACXC,EAAOF,EAASG,MAEtB,IAAI,IAAIC,KAAOF,EACbD,EAASZ,KAAK,CAACgB,KAAKH,EAAKE,GAAME,GAAGF,IAEpC,EAAKzB,SAAS,CACZmB,UAAUG,S,+BAiCH,IAAD,OAER,OACE,yBAAKM,UAAU,OACb,gCACA,0CAEA,6BAASA,UAAU,8BACnB,yBAAKA,UAAU,eACf,kDACA,yHAEE,yBAAKA,UAAU,eACjB,2DACA,yLAGA,6BAASA,UAAU,wBACnB,+EACA,0BAAMC,OAAO,SAASD,UAAU,aAC5B,2BAAOE,UAAQ,EAACC,KAAK,OAAO5B,MAAO6B,KAAKrB,MAAMC,SAAUV,KAAK,WAAW+B,SAAUD,KAAKlC,eACvF,2BAAOgC,UAAQ,EAACC,KAAK,OAAO5B,MAAO6B,KAAKrB,MAAME,SAAUX,KAAK,WAAW+B,SAAUD,KAAKlC,eACvF,2BAAOgC,UAAQ,EAACC,KAAK,OAAO5B,MAAO6B,KAAKrB,MAAMG,WAAYZ,KAAK,aAAa+B,SAAUD,KAAKlC,eAC7F,4BAAQiC,KAAK,SAASG,QAASF,KAAK5B,aAApC,QAGN,yBAAKwB,UAAU,gBACbI,KAAKrB,MAAMQ,UAAUgB,KAAI,SAACC,GACxB,OACE,yBAAKR,UAAU,kBAEb,uBAAGH,IAAKW,EAAKT,IAAKS,EAAKV,MAAS,4BAAQQ,QAAS,kBAAI,EAAKnB,UAAUqB,EAAKT,KAAKC,UAAU,aAAxD,WAOpC,gCAAQ,0CAAe,uBAAGS,KAAK,wBAAR,wB,GA9FXC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.15993337.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAkx6OXoX35t6QZKKJT-lmJIzfSQ8ekPuU\",\r\n    authDomain: \"practice-gratitude.firebaseapp.com\",\r\n    databaseURL: \"https://practice-gratitude.firebaseio.com\",\r\n    projectId: \"practice-gratitude\",\r\n    storageBucket: \"practice-gratitude.appspot.com\",\r\n    messagingSenderId: \"106297587589\",\r\n    appId: \"1:106297587589:web:a0db08247f6a89e64fb6ec\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport firebase from './firebase';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n    userInput:[],\n    inputOne:'',\n    inputTwo:'',\n    inputThree:''\n  }\n}\n\ncomponentDidMount(){\n  const dbRef = firebase.database().ref();\n\n  dbRef.on('value',(response)=>{\n\n  const newState = [];\n  const data = response.val();\n  \n  for(let key in data){\n    newState.push({item:data[key], id:key})\n  }\n  this.setState({\n    userInput:newState\n  })\n  })\n\n}\n\nhandleChange = (event)=>{\nthis.setState({\n  [event.target.name]:event.target.value\n})\n}\nhandleClick = (e)=>{\n  e.preventDefault();\n\n  const dbRef = firebase.database().ref()\n  \n  dbRef.push(this.state.inputOne)\n  dbRef.push(this.state.inputTwo)\n  dbRef.push(this.state.inputThree)\n  \n  this.setState({\n    inputOne:'',\n    inputTwo:'',\n    inputThree:''\n  })\n}\ndeleteBtn = (wordId) =>{\n  const dbRef = firebase.database().ref()\n  dbRef.child(wordId).remove();\n}\n \n  \n\n  render(){\n\n  return (\n    <div className=\"App\">\n      <header>\n      <h1>Gratitude</h1>\n      </header>\n      <section className=\"explanationSection wrapper\">\n      <div className=\"explanation\">\n      <h2>What is Gratitude?</h2>\n      <p>The quality of being thankful; readiness to show appreciation for and to return kindness.</p>\n      </div>\n        <div className=\"explanation\">\n      <h2>The Importance of Gratitude</h2>\n      <p>Practicing gratitude allows you to focus on the present, appreciate what you have rather than what you do not have, and increases feelings of happiness.</p>\n      </div>\n      </section>\n      <section className=\"inputSection wrapper\">\n      <h3>Please share three things you are grateful for:</h3>\n      <form action=\"submit\" className=\"inputForm\">\n          <input required type=\"text\" value={this.state.inputOne} name=\"inputOne\" onChange={this.handleChange}/>\n          <input required type=\"text\" value={this.state.inputTwo} name=\"inputTwo\" onChange={this.handleChange}/>\n          <input required type=\"text\" value={this.state.inputThree} name=\"inputThree\" onChange={this.handleChange}/>\n        <button type=\"submit\" onClick={this.handleClick}>Add</button>\n      </form>\n      \n  <div className=\"responseArea\">{\n    this.state.userInput.map((word)=>{\n      return(\n        <div className=\"inputContainer\">\n          \n          <p key={word.id}>{word.item}</p><button onClick={()=>this.deleteBtn(word.id)} className=\"deleteBtn\">X</button>\n          \n        </div>\n      )\n    })\n    }</div>\n      </section>\n      <footer><p>Designed by <a href=\"www.shondamoshis.com\">Shonda Moshis</a></p></footer>\n    \n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}